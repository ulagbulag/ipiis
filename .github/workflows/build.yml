name: Build => Test => Deploy Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

  REGISTRY: quay.io
  REGISTRY_USER: kerryeon
  REGISTRY_REPOSITORY: ulagbulag-village
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  RELEASE_NAME: IPIIS
  IMAGE_NAME: ipiis

  ALPINE_VERSION: "3.16"

jobs:
  build-rust:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build
        run: cargo build --all --workspace --verbose

      - name: Run tests
        run: cargo test --all --workspace --verbose

  build-and-push-image-quic:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - build-rust
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to ${{ env.REGISTRY }}
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build Image
        id: build-and-push-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: latest-quic
          context: "."
          containerfiles: |
            ./Dockerfile
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
            API_FEATURES=quic

      - name: Push To ${{ env.REGISTRY }}
        id: push-to-quay
        if: ${{ github.repository }} == ${{ env.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-and-push-image.outputs.image }}
          tags: ${{ steps.build-and-push-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}/${{ env.REGISTRY_REPOSITORY }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

  build-and-push-image-tcp:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - build-rust
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to ${{ env.REGISTRY }}
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build Image
        id: build-and-push-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: latest-tcp
          context: "."
          containerfiles: |
            ./Dockerfile
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
            API_FEATURES=tcp

      - name: Push To ${{ env.REGISTRY }}
        id: push-to-quay
        if: ${{ github.repository }} == ${{ env.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-and-push-image.outputs.image }}
          tags: ${{ steps.build-and-push-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}/${{ env.REGISTRY_REPOSITORY }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - build-and-push-image-quic
      - build-and-push-image-tcp
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Release
        uses: rymndhng/release-on-push-action@master
        with:
          release_name: Automatic Release of Cutting-Edge ${{ env.RELEASE_NAME }}
          release_body: Committed as ${{ github.sha }}
          bump_version_scheme: patch
          use_github_release_notes: false
